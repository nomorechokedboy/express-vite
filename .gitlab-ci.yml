image: docker/compose:alpine-1.27.4

services:
  - docker:dind

variables:
  PORT: 5000
  UID_GID: 1000:1000

cache:
  key: ${CI_COMMIT_REF_SLUG} # only apply for current branch
  paths:
    - node_modules/

stages:
  - build
  - linting
  - test
  - release
  - deploy

before_script:
  - docker version
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.run-on-files:
  only:
    changes:
      - '**/*.{ts,js}'
      - '**/*.json'
      - Dockerfile
      - .gitlab-ci.yml
      - package.json
      - scripts/*

.qa-phase:
  extends: .run-on-files
  before_script:
    - docker-compose version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest

install_dependencies:
  extends: .run-on-files
  image: node:14-alpine
  stage: build
  before_script:
    - node -v && yarn -v
  script:
    - yarn

build:
  stage: build
  extends: .run-on-files
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

.lints:
  extends: .qa-phase
  stage: linting
  needs: ['build']

linting:
  extends: .lints
  needs:
    - 'install_dependencies'
  script:
    - echo 'PORT=$PORT\nUID_GID=$UID_GID' >> .env
    # - ./script/compose-start.sh lint
    - ls -a
    - docker-compose -f docker-compose.yml -f docker-compose.lint.yml up --abort-on-container-exit

lint-commit-msg:
  extends: .lints
  image: node:14-alpine
  before_script:
    - node -v && yarn -v
  script:
    - echo "$CI_COMMIT_MESSAGE" | npx commitlint

.tests:
  extends: .qa-phase
  stage: test
  needs: ['build']
  before_script:
    - docker-compose version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest

jest:
  extends: .tests
  script:
    - echo 'PORT=$PORT\nUID_GID=$UID_GID' >> .env
    # - ./script/compose-start.sh test
    - ls -a
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage/

.release:
  extends: .run-on-files
  variables:
    GIT_STRATEGY: none
  stage: release
  needs:
    - 'jest'
    - 'linting'

release-tag:
  extends: .release
  except:
    refs:
      - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

release-latest:
  extends: .release
  only:
    refs:
      - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  stage: deploy
  needs:
    - 'release-latest'
  variables:
    GIT_STRATEGY: none
  extends: .run-on-files
  only:
    refs:
      - main
  before_script:
    - apk update && apk add openssh-client bash
  script:
    - eval $(ssh-agent -s)

    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'

    - mkdir -p ~/.ssh

    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts

    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd ${PATH_TO_PROJECT};
      docker-compose down;
      docker pull ${CI_REGISTRY_IMAGE}:latest;
      docker-compose up -d;
      docker image prune -f;"
