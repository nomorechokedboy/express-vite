image: docker/compose:alpine-1.27.4

services:
  - docker:dind

cache:
  key: ${CI_COMMIT_REF_SLUG} # only apply for current branch
  paths:
    - node_modules/

stages:
  - install-deps
  - linting
  - test
  - build
  - release
  - deploy

before_script:
  - docker version
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.file-changes-for-test-lint:
  only:
    changes:
      - '**/*.{ts,js}'

.files-changes-for-cd:
  only:
    changes:
      - '**/*.{ts,js,json}'
      - Dockerfile
      - .gitlab-ci.yml
      - package.json
      - scripts/*

.lints:
  extends: .file-changes-for-test-lint
  stage: linting
  image: node:14-alpine
  needs: ['install_dependencies']

.tests:
  extends: .file-changes-for-test-lint
  image: node:14-alpine
  stage: test
  needs: ['install_dependencies']
  before_script:
    - docker-compose version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest

install_dependencies:
  image: node:14-alpine
  stage: install-deps
  before_script:
    - node -v && yarn -v
  script:
    - yarn
  only:
    changes:
      - '**/*.{ts,js}'
      - package.json

linting:
  extends: .lints
  script:
    - docker-compose up -d
    - docker-compose exec -T app yarn lint

lint-commit-msg:
  extends: .lints
  script:
    - echo "$CI_COMMIT_MESSAGE" | npx commitlint

jest:
  extends: .tests
  script:
    - docker-compose up -d
    - docker-compose exec -T app yarn test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage/

build:
  stage: build
  extends: .files-changes-for-cd
  needs: ['linting', 'jest']
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

.release:
  extends: .files-changes-for-cd
  variables:
    GIT_STRATEGY: none
  stage: release
  needs:
    - 'build'

release-tag:
  extends: .release
  except:
    refs:
      - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

release-latest:
  extends: .release
  only:
    refs:
      - main
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  stage: deploy
  needs:
    - 'release-tag'
    - 'release-latest'
  variables:
    GIT_STRATEGY: none
  extends: .files-changes-for-cd
  only:
    refs:
      - main
  before_script:
    - apk update && apk add openssh-client bash
  script:
    - eval $(ssh-agent -s)

    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'

    - mkdir -p ~/.ssh

    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts

    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd ${PATH_TO_PROJECT};
      docker-compose down;
      docker pull ${CI_REGISTRY_IMAGE}:latest;
      docker-compose up -d;
      docker image prune -f;"
